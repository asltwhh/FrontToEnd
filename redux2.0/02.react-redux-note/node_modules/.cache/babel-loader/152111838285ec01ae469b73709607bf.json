{"ast":null,"code":"var _jsxFileName = \"E:\\\\mycode\\\\react-redux-note\\\\src\\\\todoList.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\n\nconst TodoList = () => {\n  // 4 在该组件中使用state中的属性的地方进行修改，直接从props中取值即可\n  const {\n    inputValue,\n    inputChange,\n    addItems,\n    list\n  } = this.props;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    value: inputValue,\n    onChange: inputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: addItems,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 17\n    }\n  }, \"\\u63D0\\u4EA4\")), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 13\n    }\n  }, list.map((item, index) => {\n    return /*#__PURE__*/React.createElement(\"li\", {\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 29\n      }\n    }, item);\n  })));\n}; // 3 定义映射关系函数1，将store对象中的state映射为组件TodoList中的props属性\n\n\nconst stateProps = state => {\n  // console.log(state);   这里传入的state就是store仓库中的state\n  return {\n    inputValue: state.inputValue,\n    list: state.list\n  };\n}; // 定义映射关系函数2\n\n\nconst dispatchToProps = dispatch => {\n  return {\n    inputChange(e) {\n      let action = {\n        type: 'change_input',\n        value: e.target.value\n      };\n      dispatch(action);\n    },\n\n    addItems() {\n      let action = {\n        type: 'add_items'\n      };\n      dispatch(action);\n    }\n\n  };\n}; // 2 改变暴露的组件，将暴露的内容改为connect连接器\n\n\nexport default connect(stateProps, dispatchToProps)(TodoList);","map":{"version":3,"sources":["E:/mycode/react-redux-note/src/todoList.js"],"names":["React","connect","TodoList","inputValue","inputChange","addItems","list","props","map","item","index","stateProps","state","dispatchToProps","dispatch","e","action","type","value","target"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,OAAR,QAAsB,aAAtB;;AAEA,MAAMC,QAAQ,GAAG,MAAK;AACd;AACJ,QAAM;AAACC,IAAAA,UAAD;AAAaC,IAAAA,WAAb;AAAyBC,IAAAA,QAAzB;AAAkCC,IAAAA;AAAlC,MAA0C,KAAKC,KAArD;AAEA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAO,IAAA,KAAK,EAAEJ,UAAd;AAA0B,IAAA,QAAQ,EAAEC,WAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAEI;AAAQ,IAAA,OAAO,EAAEC,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFJ,CADJ,eAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEQC,IAAI,CAACE,GAAL,CAAS,CAACC,IAAD,EAAMC,KAAN,KAAgB;AACrB,wBACI;AAAI,MAAA,GAAG,EAAEA,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAiBD,IAAjB,CADJ;AAGH,GAJD,CAFR,CALJ,CADJ;AAiBH,CArBD,C,CAuBA;;;AACA,MAAME,UAAU,GAAIC,KAAD,IAAW;AAC1B;AACA,SAAO;AACHT,IAAAA,UAAU,EAAES,KAAK,CAACT,UADf;AAEHG,IAAAA,IAAI,EAAEM,KAAK,CAACN;AAFT,GAAP;AAIH,CAND,C,CAQA;;;AACA,MAAMO,eAAe,GAAIC,QAAD,IAAc;AAClC,SAAO;AACHV,IAAAA,WAAW,CAACW,CAAD,EAAG;AACV,UAAIC,MAAM,GAAG;AACTC,QAAAA,IAAI,EAAE,cADG;AAETC,QAAAA,KAAK,EAAEH,CAAC,CAACI,MAAF,CAASD;AAFP,OAAb;AAIAJ,MAAAA,QAAQ,CAACE,MAAD,CAAR;AACH,KAPE;;AAQHX,IAAAA,QAAQ,GAAE;AACN,UAAIW,MAAM,GAAG;AACTC,QAAAA,IAAI,EAAE;AADG,OAAb;AAGAH,MAAAA,QAAQ,CAACE,MAAD,CAAR;AACH;;AAbE,GAAP;AAeH,CAhBD,C,CAkBA;;;AACA,eAAef,OAAO,CAClBU,UADkB,EAElBE,eAFkB,CAAP,CAEMX,QAFN,CAAf","sourcesContent":["import React from 'react';\r\nimport {connect} from 'react-redux'\r\n\r\nconst TodoList = () =>{\r\n        // 4 在该组件中使用state中的属性的地方进行修改，直接从props中取值即可\r\n    const {inputValue, inputChange,addItems,list} = this.props;\r\n    \r\n    return ( \r\n        <div>\r\n            <div>\r\n                <input value={inputValue} onChange={inputChange}/>\r\n                <button onClick={addItems}>提交</button>\r\n            </div>\r\n            <ul>\r\n                {\r\n                    list.map((item,index) => {\r\n                        return (\r\n                            <li key={index}>{item}</li>\r\n                        )\r\n                    })\r\n                }\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\n// 3 定义映射关系函数1，将store对象中的state映射为组件TodoList中的props属性\r\nconst stateProps = (state) => {\r\n    // console.log(state);   这里传入的state就是store仓库中的state\r\n    return {\r\n        inputValue: state.inputValue,\r\n        list: state.list\r\n    };\r\n}\r\n\r\n// 定义映射关系函数2\r\nconst dispatchToProps = (dispatch) => {\r\n    return {\r\n        inputChange(e){\r\n            let action = {\r\n                type: 'change_input',\r\n                value: e.target.value\r\n            }\r\n            dispatch(action);\r\n        },\r\n        addItems(){\r\n            let action = {\r\n                type: 'add_items'\r\n            }\r\n            dispatch(action);\r\n        }\r\n    }\r\n}\r\n\r\n// 2 改变暴露的组件，将暴露的内容改为connect连接器\r\nexport default connect(\r\n    stateProps,\r\n    dispatchToProps)(TodoList);"]},"metadata":{},"sourceType":"module"}