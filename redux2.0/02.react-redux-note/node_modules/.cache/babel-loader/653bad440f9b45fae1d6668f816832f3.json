{"ast":null,"code":"var _jsxFileName = \"E:\\\\mycode\\\\react-redux-note\\\\src\\\\todoList.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport store from './store/index';\n\nclass TodoList extends Component {\n  render() {\n    // 4 在该组件中使用state中的属性的地方进行修改，直接从props中取值即可\n    const {\n      inputValue,\n      inputChange,\n      onClick,\n      list,\n      deleteItems\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      value: inputValue,\n      onChange: inputChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: onClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 21\n      }\n    }, \"\\u63D0\\u4EA4\")), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 17\n      }\n    }, list.map((item, index) => {\n      return /*#__PURE__*/React.createElement(\"li\", {\n        key: index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 33\n        }\n      }, item);\n    })));\n  }\n\n} // 3 定义映射关系函数1，将store对象中的state映射为组件TodoList中的props属性\n\n\nconst stateProps = state => {\n  // console.log(state);   这里传入的state就是store仓库中的state\n  return {\n    inputValue: state.inputValue,\n    list: state.list\n  };\n}; // 定义映射关系函数2\n\n\nconst dispatchToProps = dispatch => {\n  return {\n    inputChange(e) {\n      let action = {\n        type: 'change_input',\n        value: e.target.value\n      };\n      dispatch(action);\n    },\n\n    onClick() {\n      let action = {\n        type: 'add_items'\n      };\n      dispatch(action);\n    }\n\n  };\n}; // 2 改变暴露的组件，将暴露的内容改为connect连接器\n\n\nexport default connect(stateProps, dispatchToProps)(TodoList);","map":{"version":3,"sources":["E:/mycode/react-redux-note/src/todoList.js"],"names":["React","Component","connect","store","TodoList","render","inputValue","inputChange","onClick","list","deleteItems","props","map","item","index","stateProps","state","dispatchToProps","dispatch","e","action","type","value","target"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAAQC,OAAR,QAAsB,aAAtB;AAEA,OAAOC,KAAP,MAAkB,eAAlB;;AAEA,MAAMC,QAAN,SAAuBH,SAAvB,CAAiC;AAC7BI,EAAAA,MAAM,GAAG;AACL;AACA,UAAM;AAACC,MAAAA,UAAD;AAAaC,MAAAA,WAAb;AAAyBC,MAAAA,OAAzB;AAAiCC,MAAAA,IAAjC;AAAsCC,MAAAA;AAAtC,QAAqD,KAAKC,KAAhE;AACA,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAO,MAAA,KAAK,EAAEL,UAAd;AAA0B,MAAA,QAAQ,EAAEC,WAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAEI;AAAQ,MAAA,OAAO,EAAEC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAFJ,CADJ,eAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEQC,IAAI,CAACG,GAAL,CAAS,CAACC,IAAD,EAAMC,KAAN,KAAgB;AACrB,0BACI;AAAI,QAAA,GAAG,EAAEA,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAiBD,IAAjB,CADJ;AAGH,KAJD,CAFR,CALJ,CADJ;AAiBH;;AArB4B,C,CAwBjC;;;AACA,MAAME,UAAU,GAAIC,KAAD,IAAW;AAC1B;AACA,SAAO;AACHV,IAAAA,UAAU,EAAEU,KAAK,CAACV,UADf;AAEHG,IAAAA,IAAI,EAAEO,KAAK,CAACP;AAFT,GAAP;AAIH,CAND,C,CAQA;;;AACA,MAAMQ,eAAe,GAAIC,QAAD,IAAc;AAClC,SAAO;AACHX,IAAAA,WAAW,CAACY,CAAD,EAAG;AACV,UAAIC,MAAM,GAAG;AACTC,QAAAA,IAAI,EAAE,cADG;AAETC,QAAAA,KAAK,EAAEH,CAAC,CAACI,MAAF,CAASD;AAFP,OAAb;AAIAJ,MAAAA,QAAQ,CAACE,MAAD,CAAR;AACH,KAPE;;AAQHZ,IAAAA,OAAO,GAAE;AACL,UAAIY,MAAM,GAAG;AACTC,QAAAA,IAAI,EAAE;AADG,OAAb;AAGAH,MAAAA,QAAQ,CAACE,MAAD,CAAR;AACH;;AAbE,GAAP;AAeH,CAhBD,C,CAkBA;;;AACA,eAAelB,OAAO,CAClBa,UADkB,EAElBE,eAFkB,CAAP,CAEMb,QAFN,CAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport {connect} from 'react-redux'\r\n\r\nimport store from './store/index'\r\n\r\nclass TodoList extends Component {\r\n    render() { \r\n        // 4 在该组件中使用state中的属性的地方进行修改，直接从props中取值即可\r\n        const {inputValue, inputChange,onClick,list,deleteItems} = this.props;\r\n        return ( \r\n            <div>\r\n                <div>\r\n                    <input value={inputValue} onChange={inputChange}/>\r\n                    <button onClick={onClick}>提交</button>\r\n                </div>\r\n                <ul>\r\n                    {\r\n                        list.map((item,index) => {\r\n                            return (\r\n                                <li key={index}>{item}</li>\r\n                            )\r\n                        })\r\n                    }\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n// 3 定义映射关系函数1，将store对象中的state映射为组件TodoList中的props属性\r\nconst stateProps = (state) => {\r\n    // console.log(state);   这里传入的state就是store仓库中的state\r\n    return {\r\n        inputValue: state.inputValue,\r\n        list: state.list\r\n    };\r\n}\r\n\r\n// 定义映射关系函数2\r\nconst dispatchToProps = (dispatch) => {\r\n    return {\r\n        inputChange(e){\r\n            let action = {\r\n                type: 'change_input',\r\n                value: e.target.value\r\n            }\r\n            dispatch(action);\r\n        },\r\n        onClick(){\r\n            let action = {\r\n                type: 'add_items'\r\n            }\r\n            dispatch(action);\r\n        }\r\n    }\r\n}\r\n\r\n// 2 改变暴露的组件，将暴露的内容改为connect连接器\r\nexport default connect(\r\n    stateProps,\r\n    dispatchToProps)(TodoList);"]},"metadata":{},"sourceType":"module"}