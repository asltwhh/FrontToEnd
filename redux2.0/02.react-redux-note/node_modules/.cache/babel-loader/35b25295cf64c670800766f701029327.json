{"ast":null,"code":"var _jsxFileName = \"E:\\\\mycode\\\\react-redux-note\\\\src\\\\todoList.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { changeInputAction, addItemAction, deleteItemAction } from './store/action';\n\nclass TodoList extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.inputChange = e => {\n      this.props.changeInputAction(e.target.value);\n    };\n\n    this.addItems = () => {\n      this.props.addItemAction();\n    };\n\n    this.deleteItems = index => {\n      this.props.deleteItemAction(index);\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      value: inputValue,\n      onChange: inputChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: addItems,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 21\n      }\n    }, \"\\u63D0\\u4EA4\")), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 17\n      }\n    }, list.map((item, index) => {\n      return /*#__PURE__*/React.createElement(\"li\", {\n        key: index,\n        onSelect: this.deleteItems(index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 33\n        }\n      }, item);\n    })));\n  }\n\n} // 3 定义映射关系函数1，将store对象中的state映射为组件TodoList中的props属性\n\n\nconst stateProps = state => {\n  // console.log(state);   这里传入的state就是store仓库中的state\n  return {\n    inputValue: state.inputValue,\n    list: state.list\n  };\n}; // 定义映射关系函数2\n\n/* const dispatchToProps = (dispatch) => {\r\n    return {\r\n        inputChange(e){\r\n            const action = changeInputAction(e.target.value)\r\n            dispatch(action);\r\n        },\r\n        addItems(){\r\n            const action = addItemAction()\r\n            dispatch(action);\r\n        },\r\n        deleteItems(index){\r\n            const action = deleteItemAction(index)\r\n            dispatch(action);\r\n        }\r\n    }\r\n} */\n// 2 改变暴露的组件，将暴露的内容改为connect连接器\n\n\nexport default connect(stateProps, {\n  changeInputAction,\n  addItemAction,\n  deleteItemAction\n})(TodoList);","map":{"version":3,"sources":["E:/mycode/react-redux-note/src/todoList.js"],"names":["React","Component","connect","changeInputAction","addItemAction","deleteItemAction","TodoList","inputChange","e","props","target","value","addItems","deleteItems","index","render","inputValue","list","map","item","stateProps","state"],"mappings":";AAAA,OAAOA,KAAP,IAAcC,SAAd,QAA8B,OAA9B;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,iBAAR,EAA0BC,aAA1B,EAAwCC,gBAAxC,QAA+D,gBAA/D;;AAGA,MAAMC,QAAN,SAAuBL,SAAvB,CAAgC;AAAA;AAAA;;AAAA,SAG5BM,WAH4B,GAGbC,CAAD,IAAO;AACjB,WAAKC,KAAL,CAAWN,iBAAX,CAA6BK,CAAC,CAACE,MAAF,CAASC,KAAtC;AACH,KAL2B;;AAAA,SAM5BC,QAN4B,GAMjB,MAAM;AACb,WAAKH,KAAL,CAAWL,aAAX;AACH,KAR2B;;AAAA,SAS5BS,WAT4B,GASbC,KAAD,IAAW;AACrB,WAAKL,KAAL,CAAWJ,gBAAX,CAA4BS,KAA5B;AACH,KAX2B;AAAA;;AAa5BC,EAAAA,MAAM,GAAE;AACJ,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAO,MAAA,KAAK,EAAEC,UAAd;AAA0B,MAAA,QAAQ,EAAET,WAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAEI;AAAQ,MAAA,OAAO,EAAEK,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAFJ,CADJ,eAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEQK,IAAI,CAACC,GAAL,CAAS,CAACC,IAAD,EAAML,KAAN,KAAgB;AACrB,0BACI;AAAI,QAAA,GAAG,EAAEA,KAAT;AAAgB,QAAA,QAAQ,EAAE,KAAKD,WAAL,CAAiBC,KAAjB,CAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAoDK,IAApD,CADJ;AAGH,KAJD,CAFR,CALJ,CADJ;AAiBH;;AA/B2B,C,CAkChC;;;AACA,MAAMC,UAAU,GAAIC,KAAD,IAAW;AAC1B;AACA,SAAO;AACHL,IAAAA,UAAU,EAAEK,KAAK,CAACL,UADf;AAEHC,IAAAA,IAAI,EAAEI,KAAK,CAACJ;AAFT,GAAP;AAIH,CAND,C,CAQA;;AACA;;;;;;;;;;;;;;;;AAiBA;;;AACA,eAAef,OAAO,CAClBkB,UADkB,EAElB;AAACjB,EAAAA,iBAAD;AAAmBC,EAAAA,aAAnB;AAAiCC,EAAAA;AAAjC,CAFkB,CAAP,CAGbC,QAHa,CAAf","sourcesContent":["import React,{Component} from 'react';\r\nimport {connect} from 'react-redux'\r\nimport {changeInputAction,addItemAction,deleteItemAction} from './store/action'\r\n\r\n\r\nclass TodoList extends Component{\r\n        // 4 在该组件中使用state中的属性的地方进行修改，直接从props中取值即可\r\n\r\n    inputChange = (e) => {\r\n        this.props.changeInputAction(e.target.value);\r\n    }\r\n    addItems = () => {\r\n        this.props.addItemAction();\r\n    }\r\n    deleteItems = (index) => {\r\n        this.props.deleteItemAction(index);\r\n    }\r\n    \r\n    render(){\r\n        return ( \r\n            <div>\r\n                <div>\r\n                    <input value={inputValue} onChange={inputChange}/>\r\n                    <button onClick={addItems}>提交</button>\r\n                </div>\r\n                <ul>\r\n                    {\r\n                        list.map((item,index) => {\r\n                            return (\r\n                                <li key={index} onSelect={this.deleteItems(index)}>{item}</li>\r\n                            )\r\n                        })\r\n                    }\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n// 3 定义映射关系函数1，将store对象中的state映射为组件TodoList中的props属性\r\nconst stateProps = (state) => {\r\n    // console.log(state);   这里传入的state就是store仓库中的state\r\n    return {\r\n        inputValue: state.inputValue,\r\n        list: state.list\r\n    };\r\n}\r\n\r\n// 定义映射关系函数2\r\n/* const dispatchToProps = (dispatch) => {\r\n    return {\r\n        inputChange(e){\r\n            const action = changeInputAction(e.target.value)\r\n            dispatch(action);\r\n        },\r\n        addItems(){\r\n            const action = addItemAction()\r\n            dispatch(action);\r\n        },\r\n        deleteItems(index){\r\n            const action = deleteItemAction(index)\r\n            dispatch(action);\r\n        }\r\n    }\r\n} */\r\n\r\n// 2 改变暴露的组件，将暴露的内容改为connect连接器\r\nexport default connect(\r\n    stateProps,\r\n    {changeInputAction,addItemAction,deleteItemAction}\r\n)(TodoList);"]},"metadata":{},"sourceType":"module"}